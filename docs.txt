a.buat direktory project
mkdir namafolder
cd namafolder

b.buat virtualenv
python3 -m venv env

c.aktifkan virtualenv
source env/bin/activate

d.instal django
python -m pip install --upgrade pip

e.instal paket pakai requirements
touch requirements.txt

f.instal django
pip install Django==3.0.2

g.masukkan instalan ke requirements
pip freeze > requirements.txt

h.cara install dari requirements.txt
pip install -r requirements.txt

i.buat project django
django-admin startproject rizqiadiputra .

j.ubah settings
 rizqiadiputra/settings.py
TIME_ZONE = 'Asia/Jakarta'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
ALLOWED_HOSTS = [127.0.0.1]

k.buat database sqlite
python manage.py migrate

l.hidupkan web server
python manage.py runserver

m.buka http://127.0.0.1

n.masuk ke http://127.0.0.1:8000/admin

o.buat app
python manage.py startapp blog

p.ubah di settings
pada INSTALLED_APPS, tambah 'blog.apps.BlogConfig'

q.buat sebuah blog post model

r.tambahkan model kedalam database, step awal kita kasih tau ke django bahwa ada perubahan
python manage.py makemigrations blog

s.apply ke database
python manage.py migrate blog

t.untuk mengelola web, kita gunakan django admin

u.buat superuser untuk mengontrol web
python manage.py createsuperuser

v. Deploy
Deploying is the process of publishing your application on the Internet so people can finally go and see your app. website has to be located on a server

w.Git
Git is a "version control system" used by a lot of programmers. This software can track changes to files over time so that you can recall specific versions later.

x. Install Git
Download Git from git-scm.com and follow the instructions.

y. mulai repositori git kita
masuk ke direktori rizqiadiputra
git init 
git config --global user.name "Your Name"
git config --global user.email you@example.com

z. file yang perlu di ignore agar tidak masuk di git
buat file .gitignore
touch .gitignore
nano .gitignore
isi: 
*.pyc
*~
/.vscode
__pycache__
myvenv
db.sqlite3
/static
.DS_Store

a. cek status git
git status

b.simpan perubahan
git add --all .
git commit -m "My Django rizqiadiputra App, first commit"

----
a.views
sebuah view merupakan tempat kita menaruh logic aplikasi, view me-request informasi dari model yang telah kita buat dan akan di pass ke template
-blog/views.py
from django.shortcuts import render

def daftar_post(request):
	return render(request, 'blog/daftar_post.html', {})
#def = fungsi
#daftar_post = nama fungsi
#request = melakukan request
#return = mengembalikan value yang didapat dari pemanggilan fungsi lain
#render = akan me render (mengambil bersama) di template kita

b.template
sebuah template merupakan file yang bisa digunakan untuk menampilkan informasi, django template menggunakan bahasa html
-buat file template di blog
-buat folder templates didalam folder blog
-buat folder blog didalam templates
-buat file daftar_post.html didalam folder blog
-isi daftar_post.html
<html>
<body>
    <p>Hi there!</p>
    <p>It works!</p>
</body>
</html>

c. django urls
url merupakan alamat web, setiap halaman web membutuhkan alamat masing",django menggunakan URLconf untuk set pola url.
menambahkan url blog:
-buat file urls.py di blog
-masuk ke urls di (site)/urls.py, lalu tambahkan function include, agar bisa mengimport blog.urls
-sehingga menjadi from django.urls import path, include
-tambahkan path('', include('blog.urls')), dibawah path('admin')
-'' artinya index utama, dan kita set ke url blog, maka akan muncul ke halaman blog
-tambahkan ini di blog.urls
from django.urls import path
from . import views
urlpatterns = [
    path('', views.daftar_post, name='daftar_post'),
]

d. django ORM dan QuerySet
koneksi database di django
-QuerySet
merupakan sebuah daftar obyek yang diberikan oleh model, dengan QuerySet kita dapat baca data dari database, filter, dan order
-Django Shell
kita tes query menggunakan console dengan cara, python manage.py shell
--all objects (menampilkan semua data) dengan cara
#import terlebih dahulu
    from blog.models import Post (kita import model Post dari blog.models)
#tampilkan data
    Post.objects.all()
--buat objek baru
#kita coba mengambil penulisnya adalah rizqi, kita akan membuat sebuah sebuah instance dari User model sebagai penulis
#import User model
from django.contrib.auth.models import User
User.objects.all()
rizqi = User.objects.get(username='root')
#root merupakan superuser yang telah kita buat diawal
#kemudian kita buat objek barunya
Post.objects.create(penulis=rizqi, judul='contoh', isi='test')
--filter objects
Post.objects.filter(penulis=rizqi)
Post.objects.filter(judul__contains='contoh')

--filter berdasarkan waktu
from django.utils import timezone
Post.objects.filter(tgl_terbit__lte=timezone.now())

--publish objects
post = Post.objects.get(judul='contoh')
#method terbit
post.terbit()

--ordering objects
order list objects
#asecending
Post.objects.order_by('tgl_buat')
#descending
Post.objects.order_by('-tgl_buat')

--kombinasi filter
Post.objects.filter(tgl_terbit__lte=timezone.now()).order_by('tgl_terbit')

--keluar dari django shell
exit()

e. dynamic data in templates
menghubungkan model dengan templates
-buka blog/views.py
from django.shortcuts import render

def post_list(request):
    return render(request, 'blog/post_list.html', {})
-include model pada blog/views.py
from django.shortcuts import render
from .models import Post

# . (dot) artinya masih dalam 1 aplikasi yang sama

-QuerySet di blog/views.py
from django.shortcuts import render
from django.utils import timezone
from .models import Post

def post_list(request):
    posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
    return render(request, 'blog/post_list.html', {})

-blog/daftar_post.html
        {% for post in posts_ditemplate %}
            <div>
                <p>terbit: {{ post.tgl_terbit }}</p>
                <h2><a href="">{{ post.judul }}</a></h2>
                <p>{{ post.isi|linebreaksbr }}</p>
            </div>
        {% endfor %}

f. static files in django
-buat folder static di dalam blog
-blog/static/css/blog.css
-tambahkan {% load static %} diatas kode html pada template

g.template extending
kita dapat menggunakan sebuah bagian html yang sama untuk digunakan di beberapa halaman html yang berbeda
-create sebuah base html
base html merupakan template dasar yang dapat di extend diberbagai page website kita
-tulis di base.html
{% load static %}
html
body
{% block content %}
{% endblock %}
body
html
-tulis di page lain
{% extends 'blog/base.html' %}
{% block content %}
isi konten
{% endblock %}

f. detail content
-buat template post detail = templates/blog/post_detail.html
-buat function post detail di view
-tambah url post detail
-tambah link url detail post di button link url = templates/blog/daftar_post.html
